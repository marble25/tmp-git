name: Build & Deploy to Prod

on:
  workflow_dispatch:
    inputs:
      buildAgent:
        description: 'Build & Push agent image to ECR'
        required: true
        default: false
        type: boolean
      deployProd:
        description: 'Deploy to Prod'
        required: true
        default: false
        type: boolean

env:
  AWS_REGION: ${{ secrets.PROD_AWS_REGION }}
  AWS_ROLE: ${{ secrets.PROD_AWS_ROLE }}
  ECR_REPOSITORY: personal-docai-enterprise-prodcodepipeline-personaldocaienterpriseprodrepositorydd27859b-ipbalj4ywsd5

permissions:
  id-token: write
  contents: write

jobs:
  deploy-prod:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Build & Push Docker Agent Image
        id: build-and-push-docker-agent-image
        if: ${{ inputs.buildAgent }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          ECR_IMAGE_TAG: ${{ github.sha }}
        working-directory: ./
        run: |
          COMMIT_HASH=$(echo $ECR_IMAGE_TAG | cut -c 1-7)
          LOCAL_IMAGE_NAME=inference-docker-agent
          TAG_1=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.ref_name }}-agent-docker

          docker build -t $LOCAL_IMAGE_NAME -f ./cdk/Dockerfile.agent.docker .
          docker tag $LOCAL_IMAGE_NAME $TAG_1
          
          docker push $TAG_1

      - name: Build & Push Podman Agent Image
        id: build-and-push-podman-agent-image
        if: ${{ inputs.buildAgent }}
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          ECR_IMAGE_TAG: ${{ github.sha }}
        working-directory: ./
        run: |
          COMMIT_HASH=$(echo $ECR_IMAGE_TAG | cut -c 1-7)
          LOCAL_IMAGE_NAME=inference-podman-agent
          TAG_1=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.ref_name }}-agent-podman

          docker build -t $LOCAL_IMAGE_NAME -f ./cdk/Dockerfile.agent.podman .
          docker tag $LOCAL_IMAGE_NAME $TAG_1
          
          docker push $TAG_1

      - name: Build & Push Controller Image
        id: build-and-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          DEPLOY_PROD: ${{ inputs.deployProd }}
          ECR_IMAGE_TAG: ${{ github.sha }}
          LOCAL_IMAGE_NAME: ${{ env.LOCAL_IMAGE_NAME }}
        working-directory: ./
        run: |
          COMMIT_HASH=$(echo $ECR_IMAGE_TAG | cut -c 1-7)
          LOCAL_IMAGE_NAME=inference-server
          TAG_1=$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.ref_name }}
          TAG_2=$ECR_REGISTRY/$ECR_REPOSITORY:$COMMIT_HASH

          docker build -t $LOCAL_IMAGE_NAME -f ./cdk/Dockerfile.controller .
          docker tag $LOCAL_IMAGE_NAME $TAG_1
          docker tag $LOCAL_IMAGE_NAME $TAG_2
          

          docker push $TAG_1
          docker push $TAG_2

          if [ $DEPLOY_PROD = true ]; then
            echo "Deploying to Prod"
            TAG_3=$ECR_REGISTRY/$ECR_REPOSITORY:saas-latest
            docker tag $LOCAL_IMAGE_NAME $TAG_3
            docker push $TAG_3
          fi